A<-1.1
B<-0.25
old.par<-par(usr=c(-A,A,-B,B))
options(repr.plot.width=16,repr.plot.height=3)
plot.new()
plot.window(xlim=c(-A,A),ylim=c(-B,B),bty="o")
bg<-"LightCyan"
axis(1,pos=0,lwd=1.5,at=c(-1,1),labels=c("0","1"),col.lab="blue",cex.lab=2,tick=FALSE,
col.axis=bg,cex.axis=1,las=1)
Lx<-c(-1,1)
Ly<-c(0,0)
lines(Lx,Ly,lwd=8,col="blue")
points(Lx,Ly,pch=19,cex=3,col="blue")
text(Lx,c(-0.2,-0.2),c("0","1"),col="blue",cex=2)
par(old.par)
A<-1.1
B<-0.25
old.par<-par(usr=c(-A,A,-B,B))
options(repr.plot.width=16,repr.plot.height=3)
plot.new()
plot.window(xlim=c(-A,A),ylim=c(-B,B),bty="o")
bg<-"white"
axis(1,pos=0,lwd=1.5,at=c(-1,1),labels=c("0","1"),col.lab="blue",cex.lab=2,tick=FALSE,
col.axis=bg,cex.axis=1,las=1)
Lx<-c(-1,1)
Ly<-c(0,0)
lines(Lx,Ly,lwd=8,col="blue")
points(Lx,Ly,pch=19,cex=3,col="blue")
text(Lx,c(-0.2,-0.2),c("0","1"),col="blue",cex=2)
x.cue<--1+2*0.65
points(x.cue,0,pch=16,col="red",cex=6)
text(x.cue,-0.2,c("p"),col="red",cex=2)
par(old.par)
# Game rules: first to attain W points wins
W<-6
# Initialization
set.seed(24025)   # some arbitrary seed - for the sake of reproducibility
A<-1.1
B<-0.25
old.par<-par(usr=c(-A,A,-B,B))
options(repr.plot.width=16,repr.plot.height=3)
plot.new()
plot.window(xlim=c(-A,A),ylim=c(-B,B),bty="o")
bg<-"white"
axis(1,pos=0,lwd=1.5,at=c(-1,1),labels=c("0","1"),col.lab="blue",cex.lab=2,tick=FALSE,
col.axis=bg,cex.axis=1,las=1)
Lx<-c(-1,1)
Ly<-c(0,0)
lines(Lx,Ly,lwd=8,col="blue")
points(Lx,Ly,pch=19,cex=3,col="blue")
text(Lx,c(-0.2,-0.2),c("0","1"),col="blue",cex=2)
x.cue<--1+2*0.65
points(x.cue,0,pch=16,col="red",cex=6)
text(x.cue,-0.2,c("p"),col="red",cex=2)
x<--1+2*runif(1)
points(x,0,pch=16,col="black",cex=6)
par(old.par)
A<-1.1
B<-0.25
old.par<-par(usr=c(-A,A,-B,B))
options(repr.plot.width=16,repr.plot.height=3)
plot.new()
plot.window(xlim=c(-A,A),ylim=c(-B,B),bty="o")
bg<-"white"
axis(1,pos=0,lwd=1.5,at=c(-1,1),labels=c("0","1"),col.lab="blue",cex.lab=2,tick=FALSE,
col.axis=bg,cex.axis=1,las=1)
Lx<-c(-1,1)
Ly<-c(0,0)
lines(Lx,Ly,lwd=8,col="blue")
points(Lx,Ly,pch=19,cex=3,col="blue")
text(Lx,c(-0.2,-0.2),c("0","1"),col="blue",cex=2)
x.cue<--1+2*0.65
points(x.cue,0,pch=16,col="red",cex=6)
text(x.cue,-0.2,c("p"),col="red",cex=2)
x<--1+2*runif(1)
points(x,0,pch=16,col="black",cex=6)
par(old.par)
A<-1.1
B<-0.25
old.par<-par(usr=c(-A,A,-B,B))
options(repr.plot.width=16,repr.plot.height=3)
plot.new()
plot.window(xlim=c(-A,A),ylim=c(-B,B),bty="o")
bg<-"white"
axis(1,pos=0,lwd=1.5,at=c(-1,1),labels=c("0","1"),col.lab="blue",cex.lab=2,tick=FALSE,
col.axis=bg,cex.axis=1,las=1)
Lx<-c(-1,1)
Ly<-c(0,0)
lines(Lx,Ly,lwd=8,col="blue")
points(Lx,Ly,pch=19,cex=3,col="blue")
text(Lx,c(-0.2,-0.2),c("0","1"),col="blue",cex=2)
x.cue<--1+2*0.65
points(x.cue,0,pch=16,col="red",cex=6)
text(x.cue,-0.2,c("p"),col="red",cex=2)
x<--1+2*runif(1)
points(x,0,pch=16,col="black",cex=6)
par(old.par)
#number of throws so far, number of points for A so far, same for B
n<-8
a<-5
b<-n-a
N<-100000
p<-runif(N)
ap<-rbinom(N,size=n,prob=p)
T<-table(ap)
T
p.post<-p[ap==a]
n.post<-length(p.post)
str(p.post)
F.result<-rbinom(n.post,size=W-b,prob=1-p.post)       # number of points for Bob
B.wins<-(F.result==(W-b))
Freq.Bob.wins<-sum(B.wins)/n.post
round(Freq.Bob.wins,3)
# Store as a data.frame, for plotting
p.post.df<-data.frame(p.post)
str(p.post.df)
require(MASS,quietly=TRUE)
require(ggplot2,quietly=TRUE)
options(repr.plot.width=7,repr.plot.height=7)
h<-hist(p.post,freq=FALSE,col="LightGreen")
p.post.density<-density(p.post)
str(p.post.density)
p.post.MAP<-p.post.density$x[which.max(p.post.density$y)]
round(p.post.MAP,3)
round(a/n,3)
fractions(p.post.MAP)
options(repr.plot.width=7,repr.plot.height=7)
plot.01<-ggplot(p.post.df, aes(x=p.post))+geom_histogram(aes(y=after_stat(density)),binwidth=0.04,color="blue",fill="LightGreen")+
geom_density(alpha=.4, color="DarkGreen",fill="gray",linewidth=1.1)
plot.01+geom_vline(aes(xintercept=p.post.MAP),color="red", linewidth=1.1)
x <- factor(c("yes", "yes", "no", "yes", "no"))
x
x
table(x)
# See the underlying representation of factor
unclass(x)
attr(,"levels")
x <- factor(c("yes", "yes", "no", "yes", "no"))
x
table(x)
# See the underlying representation of factor
attr(,"levels")
unclass(x)
# See the underlying representation of factor
attr(,"Levels")
# See the underlying representation of factor
attr("Levels")
# See the underlying representation of factor
attr(x,"Levels")
# See the underlying representation of factor
attr(x,"levels")
unclass(x)
x <- factor(c("yes", "yes", "no", "yes", "no"),
+ levels = c("yes", "no"))
x <- factor(c("yes", "yes", "no", "yes", "no"),levels = c("yes", "no"))
x
#Missing Values
## Create a vector with NAs in it
x <- c(1, 2, NA, 10, 3)
## Return a logical vector indicating which elements are NA
is.na(x)
## Return a logical vector indicating which elements are NaN
is.nan(x)
## Now create a vector with both NA and NaN values
x <- c(1, 2, NaN, NA, 4)
is.na(x)
is.nan(x)
##DATAFRAMES
x <- data.frame(foo = 1:4, bar = c(T, T, F, F))
x
##DATAFRAMES
x <- data.frame(foo = 1:4, bar = c(TRUE, TRUE, FALSE, FALSE))
x
##NAMES
x <- 1:3
names(x)
names(x) <- c("New York", "Seattle", "Los Angeles")
x
names(x)
#lists can also have names
x <- list("Los Angeles" = 1, Boston = 2, London = 3)
x
names(x)
# we can give names to columns and rows of matrices
m <- matrix(1:4, nrow = 2, ncol = 2)
dimnames(m) <- list(c("a", "b"), c("c", "d"))
m
##READING TABLES
data <- read.table("example.txt")
##READING TABLES
data <- read.table("example.txt")
##READING TABLES
data <- read.table("example.txt")
bye()
##MATRICES
# Create two matrices
x <- matrix(1:4, 2, 2)
y <- matrix(rep(10, 4), 2, 2)
# Element-wise multiplication
x * y
# Element-wise division
x / y
# True matrix multiplication
x %*% y
add2 <- function(x,y){
x+y #returns whatever is the last line
}
add2(3,5)
above10 <- function(x){
use <- x>10
x[use]
}
aboven <- function(x,n){
use <- x>n
x[use]
}
x<-1:20
above10(x)
columnmean <- function(y){
nc <- ncol(y)
means <- numeric(nc)
for(i in 1:nc){
means[i] <- mean(y[,i])
}
means
}
colunmmean(m)
columnmean(m)
columnmean <- function(y, removeNA = TRUE){
nc <- ncol(y)
means <- numeric(nc)
for(i in 1:nc){
means[i] <- mean(y[,i], na.rm = removeNA)
}
means
}
############################################
#Part 1
############################################
#library(dplyr)
pollutantmean <- function(directory = getwd(), monitors, pollutant){
sum_pol_tot <- 0
nna_count_tot <- 0
for(monitor in monitors){
str_monitor <- sprintf("%03d", monitor)
path = paste(directory, paste(str_monitor,".csv",sep = ""), sep = "/" )
data <- read.table(file = path,
header = TRUE,
sep = ",",
comment.char = "",
skip = 0)
nna_count <- sum(!is.na(data[[pollutant]]))
sum_pol <- sum(data[[pollutant]], na.rm = TRUE)
nna_count_tot <- nna_count_tot + nna_count
sum_pol_tot <- sum_pol_tot + sum_pol
}
# Return the average pollutant value
return(sum_pol_tot / nna_count_tot)
}
pollutantmean("specdata", "sulfate", 1:10)
############################################
#Part 1
############################################
#library(dplyr)
pollutantmean <- function(directory = getwd(),pollutant, monitors ){
sum_pol_tot <- 0
nna_count_tot <- 0
for(monitor in monitors){
str_monitor <- sprintf("%03d", monitor)
path = paste(directory, paste(str_monitor,".csv",sep = ""), sep = "/" )
data <- read.table(file = path,
header = TRUE,
sep = ",",
comment.char = "",
skip = 0)
nna_count <- sum(!is.na(data[[pollutant]]))
sum_pol <- sum(data[[pollutant]], na.rm = TRUE)
nna_count_tot <- nna_count_tot + nna_count
sum_pol_tot <- sum_pol_tot + sum_pol
}
# Return the average pollutant value
return(sum_pol_tot / nna_count_tot)
}
pollutantmean("specdata", "sulfate", 1:10)
getwd()
setwd('C:\Users\afred\REPOS\R-Programming-Course\Assignment 1')
setwd('C:/Users/afred/REPOS/R-Programming-Course/Assignment 1')
getwd()
pollutantmean("specdata", "sulfate", 1:10)
pollutantmean("specdata", "sulfate", 1:10)
pollutantmean("specdata", "nitrate", 70:72)
pollutantmean("specdata", "nitrate", 70:72)
pollutantmean("specdata", "nitrate", 23)
complete <- function(directory = getwd(),monitors){
# Initialize an empty dataframe with columns 'id' and 'nobs'
df <- data.frame(id = integer(), nobs = integer(), stringsAsFactors = FALSE)
for(monitor in monitors){
path = paste(directory, paste(str_monitor,".csv",sep = ""), sep = "/" )
data <- read.table(file = path,
header = TRUE,
sep = ",",
comment.char = "",
skip = 0)
nna_count <- sum((!is.na(data[["nitrate"]])&&(!is.na(data[["sulfate"]]))
}
# Initialize an empty dataframe with columns 'id' and 'nobs'
df <- data.frame(id = integer(), nobs = integer(), stringsAsFactors = FALSE)
complete <- function(directory = getwd(),monitors){
# Initialize an empty dataframe with columns 'id' and 'nobs'
df <- data.frame(id = integer(), nobs = integer(), stringsAsFactors = FALSE)
for(monitor in monitors){
str_monitor <- sprintf("%03d", monitor)
path = paste(directory, paste(str_monitor,".csv",sep = ""), sep = "/" )
data <- read.table(file = path,
header = TRUE,
sep = ",",
comment.char = "",
skip = 0)
nna_count <- sum((!is.na(data[["nitrate"]]))&&(!is.na(data[["sulfate"]])))
}
df <- rbind(df, data.frame(id = monitor, nobs = nna_count))
# Return the average pollutant value
return(df)
}
complete <- function(directory = getwd(),monitors){
# Initialize an empty dataframe with columns 'id' and 'nobs'
df <- data.frame(id = integer(), nobs = integer(), stringsAsFactors = FALSE)
for(monitor in monitors){
str_monitor <- sprintf("%03d", monitor)
path = paste(directory, paste(str_monitor,".csv",sep = ""), sep = "/" )
data <- read.table(file = path,
header = TRUE,
sep = ",",
comment.char = "",
skip = 0)
nna_count <- sum((!is.na(data[["nitrate"]]))&&(!is.na(data[["sulfate"]])))
}
df <- rbind(df, data.frame(id = monitor, nobs = nna_count))
# Return the average pollutant value
return(df)
}
complete("specdata", c(2, 4, 8, 10, 12))
complete <- function(directory = getwd(),monitors){
# Initialize an empty dataframe with columns 'id' and 'nobs'
df <- data.frame(id = integer(), nobs = integer(), stringsAsFactors = FALSE)
for(monitor in monitors){
str_monitor <- sprintf("%03d", monitor)
path = paste(directory, paste(str_monitor,".csv",sep = ""), sep = "/" )
data <- read.table(file = path,
header = TRUE,
sep = ",",
comment.char = "",
skip = 0)
nna_count <- sum((!is.na(data[["nitrate"]]))&(!is.na(data[["sulfate"]])))
}
df <- rbind(df, data.frame(id = monitor, nobs = nna_count))
# Return the average pollutant value
return(df)
}
complete("specdata", c(2, 4, 8, 10, 12))
complete <- function(directory = getwd(),monitors){
# Initialize an empty dataframe with columns 'id' and 'nobs'
df <- data.frame(id = integer(), nobs = integer(), stringsAsFactors = FALSE)
for(monitor in monitors){
str_monitor <- sprintf("%03d", monitor)
path = paste(directory, paste(str_monitor,".csv",sep = ""), sep = "/" )
data <- read.table(file = path,
header = TRUE,
sep = ",",
comment.char = "",
skip = 0)
nna_count <- sum((!is.na(data[["nitrate"]]))&(!is.na(data[["sulfate"]])))
df <- rbind(df, data.frame(id = monitor, nobs = nna_count))
}
# Return the average pollutant value
return(df)
}
complete("specdata", c(2, 4, 8, 10, 12))
complete("specdata", c(2, 4, 8, 10, 12))
complete("specdata", 30:25)
complete("specdata", 3)
############################################
#Part 1
############################################
source("pollutantmean.R")
############################################
#Part 1
############################################
source("pollutantmean.R")
pollutantmean("specdata", "sulfate", 1:10)
pollutantmean("specdata", "nitrate", 70:72)
pollutantmean("specdata", "nitrate", 23)
############################################
#Part 1
############################################
source("pollutantmean.R")
pollutantmean("specdata", "sulfate", 1:10)
pollutantmean("specdata", "nitrate", 70:72)
pollutantmean("specdata", "nitrate", 23)
?cor
corr("specdata", 5000)
corr <- function(directory = getwd(), threshold = 0){
df <- complete(directory,1:200)
filtered_df <- df[df$nobs > threshold, ]
for(monitor in filtered_df[['id']]){
print(monitor)
}
}
corr("specdata", 5000)
corr <- function(directory = getwd(), threshold = 0){
cor_vector <- numeric()
df <- complete(directory,1:200)
filtered_df <- df[df$nobs > threshold, ]
for(monitor in filtered_df[['id']]){
str_monitor <- sprintf("%03d", monitor)
path = paste(directory, paste(str_monitor,".csv",sep = ""), sep = "/" )
data <- read.table(file = path,
header = TRUE,
sep = ",",
comment.char = "",
skip = 0)
x <- cor(x=data[['nitrate']], y = data[['sulfate']], na.rm=TRUE)
cor_vector <- c(cor_vector, x)
}
return(cor_vector)
}
corr("specdata", 5000)
cr <- corr("specdata", 400)
head(cr)
corr <- function(directory = getwd(), threshold = 0){
cor_vector <- numeric()
df <- complete(directory,1:200)
filtered_df <- df[df$nobs > threshold, ]
for(monitor in filtered_df[['id']]){
str_monitor <- sprintf("%03d", monitor)
path = paste(directory, paste(str_monitor,".csv",sep = ""), sep = "/" )
data <- read.table(file = path,
header = TRUE,
sep = ",",
comment.char = "",
skip = 0)
x <- cor(x=data[['nitrate']], y = data[['sulfate']], use = "complete.obs")
cor_vector <- c(cor_vector, x)
}
return(cor_vector)
}
cr <- corr("specdata", 400)
head(cr)
head(cr)
summary(cr)
cr <- corr("specdata", 400)
head(cr)
############################################
#Part 3
############################################
source("corr.R")
cr <- corr("specdata", 150)
head(cr)
summary(cr)
cr <- corr("specdata", 400)
head(cr)
summary(cr)
cr <- corr("specdata", 5000)
summary(cr)
length(cr)
cr <- corr("specdata")
summary(cr)
length(cr)
############################################
#Part 3
############################################
source("corr.R")
cr <- corr("specdata", 150)
head(cr)
summary(cr)
cr <- corr("specdata", 400)
head(cr)
summary(cr)
cr <- corr("specdata", 5000)
summary(cr)
length(cr)
cr <- corr("specdata")
summary(cr)
length(cr)
